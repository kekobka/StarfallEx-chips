--@name jalpa
--@author discord.gg/6Q5NnHQTrh // kekobka // STEAM_0:0:186583728
--@shared

--@include libs/MeshBuilder.txt
local MeshBuilder = require("libs/MeshBuilder.txt")

if SERVER then
    
    --@include libs/task.txt
    local Task = require("libs/task.txt")
    local baseOffsetAngle = Angle(0,0,0)
    
    local steerLock = 65
    local camber = 0
    local rearcamber = 0
    local caster = 14
    local accerman = 0
    
    local noInputCorrMul = 0.8
    local inputCorrMul = 0.5
    local velLerpMultiplier = 0.07
    local SATMultiplier = 1
    local maxSATForce = 30
    
    local axles = {
        {
            pos = Vector(35,-51,-17), // back
            ang = Angle(0,0,0)
        },
        {
            pos = Vector(33,48.5,-16.5), //front
            ang = Angle(0,0,0),
            steer = true,
        }
    }
    local seats = {
        {
            pos = Vector(12,-32,0), // left
            ang = Angle(0,0,10),
            driver = true
        },
        {
            pos = Vector(-16,-32,0), // right
            ang = Angle(0,0,10)
        }
    }

    local createWheel = async* function(base, pos, ang)
        while not prop.canSpawn() do
            Task.sleep(250)
        end
        
        local wheel = prop.create(base:localToWorld(pos), base:localToWorldAngles(ang + Angle(-180,0,-90)), "models/sprops/trans/wheel_d/t_wheel25.mdl", true)
        constraint.nocollide(wheel, base)
        wheel:setMass(68)
        wheel:enableSphere(true)
        wheel:setInertia(Vector(6,5,6))
        wheel:getPhysicsObject():setMaterial("jeeptire")
        wheel:enableDrag(false)
        wheel:getPhysicsObject():enableMotion(false)
        while not prop.canSpawn() do
            Task.sleep(250)
        end
        
        local plate = prop.create(wheel:localToWorld(Vector(0,0,15)), base:localToWorldAngles(ang + Angle(0,0,90)), "models/sprops/rectangles_superthin/size_1/rect_3x3.mdl", true)
        plate:enableMotion(true)
        plate:getPhysicsObject():sleep()
        plate:setNocollideAll(true)
        plate:setDrawShadow(false)
        plate:setNoDraw(true)
        plate:setMass(0.1)
        plate:setParent(base)
        plate:enableDrag(false)
        
        return wheel, plate
    end
    local createSeat = async* function(base, pos, ang)
        while not prop.canSpawn() do
            Task.sleep(250)
        end
        
        local seat = prop.createSeat(base:localToWorld(pos), base:localToWorldAngles(ang + Angle(0,0,-90)), "models/nova/chair_office02.mdl", true)
        seat:setParent(base)
        seat:setSolid(true)
        seat:setNocollideAll(true)
       // seat:setNoDraw(true)
        return seat
    end
    local suspensiontravel = 10
    local ropeLength = 15
    local LimiterRopeLength = math.sqrt( (suspensiontravel * 0.5) ^ 2 + suspensiontravel ^ 2 )
    
    local createSuspension = async* function(base, wheel, plate)

        constraint.elastic(1, wheel, base, 0, 0, Vector(0,0,0), base:worldToLocal(wheel:localToWorld(Vector(0,0,suspensiontravel))), 42000, 1000, 1200, nil, false)
        
        constraint.rope(2, wheel, base, 0, 0, Vector(0,-4,0), base:worldToLocal(wheel:localToWorld(Vector(ropeLength,-ropeLength,0))), nil, 0, 0, DEBUG, 0, true)
        constraint.rope(3, wheel, base, 0, 0, Vector(0,-4,0), base:worldToLocal(wheel:localToWorld(Vector(-ropeLength,-ropeLength,0))), nil, 0, 0, DEBUG, 0, true)
        constraint.rope(4, wheel, base, 0, 0, Vector(0,-4,0), base:worldToLocal(wheel:localToWorld(Vector(0, -suspensiontravel/2 - 4, 0))), LimiterRopeLength/2, 0, 0, DEBUG, 0, false)
        
        constraint.ballsocketadv(wheel, plate, 0, 0, Vector(0), Vector(0), 0, 0, Vector(-180, -0.1, -180), Vector(180, 0.1, 180), Vector(0), true, true)
        constraint.ballsocketadv(wheel, plate, 0, 0, Vector(0), Vector(0), 0, 0, Vector(-180, -180, -0.1), Vector(180, 180, 0.1), Vector(0), true, true)
        constraint.ballsocketadv(wheel, plate, 0, 0, Vector(0), Vector(0), 0, 0, Vector(-180, -0.1, -0.1), Vector(180, 0.1, 0.1), Vector(0), true, true)

    end
    
    local createAxle = async* function(base, pos, ang, steer)
        local right, left = Task.all{
            createWheel(base, pos, ang),
            createWheel(base, pos:clone():setX(-pos.x), -ang)
        }
        createSuspension(base, unpack(right))
        createSuspension(base, unpack(left))
        right[1]:setFrozen(false)
        left[1]:setFrozen(false)
        return {right = right[2],left = left[2],rightw = right[1],leftw = left[1], steer = steer}
    end

    local drivers = {}
    local chairs = {}
    local function set_driver(ply, chair, role)

        if not chairs[chair] then return end
        local driver = role and ply 
        drivers[chair] = driver

        enableHud(ply, role and true or false)
    end

    local KG_TO_N = 1 / 9.80
    local SATCurve = { Vector(0, 0.03), Vector(0.05, 1.5), Vector(0.15, 0.1), Vector(0.2, -0.3) }
    local pow = math.pow
    function cubic(points, t)
        return Vector(
            (pow(1 - t, 3) * points[1].x) + (3 * pow(1 - t, 2) * t * points[2].x) + (3 * (1 - t) * pow(t, 2) * points[3].x) + (pow(t, 3) * points[4].x),
            (pow(1 - t, 3) * points[1].y) + (3 * pow(1 - t, 2) * t * points[2].y) + (3 * (1 - t) * pow(t, 2) * points[3].y) + (pow(t, 3) * points[4].y)
        )
    end
    
    function evalSATCurve(slip)
        local tDiff = math.abs(slip) / 90
        return cubic(SATCurve, tDiff).y * math.sign(slip)
    end
    
    function getWheelSlip(base, wheel, slave, isLeft)
        local vel = base:getVelocity()
        local velDirection = vel:getNormalized():setZ(0)
        local angDirection = -slave:getForward()
    
        local dot = angDirection:dot(velDirection)
        
        return math.deg(math.acos(dot)) - 90
    end
    
    function getWheelFrictionForce(base, wheel, slave, isLeft)
        local physObj = wheel:getPhysicsObject()
        local slip = getWheelSlip(base, wheel, slave)
    
        local load = physObj:getStress() / KG_TO_N
        local inertia = physObj:getInertia():getLength()
        local friction = wheel:getFriction()
        local mechanicalTrail = wheel:getModelRadius() / 39.37 * 2 * math.pi * caster
        local factor = math.clamp(load * friction, -maxSATForce, maxSATForce)
        local sidewaysFriction = factor * evalSATCurve(slip)
        
        return sidewaysFriction / 6
        -- return (factor * evalSATCurve(slip) * math.sign(slip) + mechanicalTrail * math.sin(math.rad(slip))) / KG_TO_N / inertia 
    end
    
    function getCorrection(base, slaves, wheels)
        local totalFrictionForce = 0

        for idx, slave in pairs(slaves) do
            local wheel = wheels[idx]
            local wheelFrictionForce = getWheelFrictionForce(base, wheel, slave)
    
            totalFrictionForce = totalFrictionForce + wheelFrictionForce
        end
        
        return totalFrictionForce * SATMultiplier
    end
    
    local builder = MeshBuilder("https://raw.githubusercontent.com/kekobka/valera/main/jalpa.obj")
    chip():setPos(chip():getPos() + Vector(0,0,55))
    chip():setAngles(Angle(0,0,0))
    chip():setDrawShadow(false)
    local pos = Vector(0,0,-25)
    local physics = builder:phys({"physics","physics.001","physics.002"}, pos, Angle(), Vector(1), nil, chip())
    local Body = builder:build("body", Vector(0,0,-25), baseOffsetAngle, Vector(1), chip(), chip(), Color(255,255,255),"phoenix_storms/pack2/interior_sides")
    builder:build("niz", Vector(0,0,-25), baseOffsetAngle, Vector(1), chip(), chip(), Color(255,255,255),"phoenix_storms/pack2/interior_sides")
    builder:build("priborka", Vector(0,0,-25), baseOffsetAngle, Vector(1), chip(), chip(), Color(255,255,255),"sprops/textures/sprops_cfiber1")
    local Steerholo = hologram.create(chip():localToWorld(Vector(12.4933,-15.1382,-25 + 3.03781)),baseOffsetAngle + Angle(0,0,23.30),"models/holograms/cube.mdl",Vector(0.1))
    Steerholo:setParent(Body)
    Steer = builder:build("steer", Vector(0,0,0), Angle(), Vector(1), Steerholo, Steerholo, Color(151,151,151),"models/debug/debugwhite")

    ;(async* function()
        local body = await* physics()
        body:setMass(600)
        body:setInertia(Vector(0.2, 2, 2) * 600)
        body:setNoDraw(true)
        Body:setParent(body)

        chip():setParent(body)

        local plates = {}
        local driverchair = nil
        for _, info in next, axles do
            local axle = await* createAxle(body, info.pos, info.ang, info.steer)
            table.insert(plates, axle)
        end
        
        
        for _, info in next, seats do
            local seat = await* createSeat(body, info.pos, info.ang)
            if info.driver then
                driverchair = seat
            end
            chairs[seat] = true
        end

    
        hook.add("PlayerEnteredVehicle", "SetDriver", set_driver)
        hook.add("PlayerLeaveVehicle", "SetDriver", set_driver)
        local steerang = 0
        hook.add("think","steering",function()
            
            local driver = driverchair:getDriver()
            if isValid(driver) then
                steerang = steerang + (driver:keyDown(IN_KEY.MOVELEFT) and 1 or 0) - (driver:keyDown(IN_KEY.MOVERIGHT) and 1 or 0)
                
            end
            local lerpFactor = math.clamp((body:getLocalVelocity():getLength() / 39.37 * 0.07), 0, 1)
            local correction = math.lerp(lerpFactor, 0, getCorrection(body, { plates[2].right, plates[2].left }, {  plates[2].rightw, plates[2].leftw }))
            local correction = correction * (isInputActive and inputCorrMul or noInputCorrMul)
            local correction = correction ~= correction and 0 or correction
            steerang = steerang - correction
            steerang = math.clamp(steerang,-45,45)
            Steer:setAngles(Steerholo:localToWorldAngles(Angle(0,-steerang * 9,0)))
            for id, axle in next, plates do
                
                axle.right:setFrozen(true)
                axle.left:setFrozen(true)
                if axle.steer then
                    axle.right:getPhysicsObject():setAngles(body:localToWorldAngles(Angle(0,-90,-steerang)))
                    axle.left:getPhysicsObject():setAngles(body:localToWorldAngles(Angle(0,90,steerang)))
                else
                    axle.right:getPhysicsObject():setAngles(body:localToWorldAngles(Angle(0,-90,0)))
                    axle.left:getPhysicsObject():setAngles(body:localToWorldAngles(Angle(0,90,0)))
                end
            end
        end)
        body:setFrozen(false)
    end)()
    builder:apply()
    
else

    local pl = player()
    local dist = 250
    local localview = false

    local a = Vector()
    hook.add("calcview","normalize",function( origin, angles, fov, znear, zfar)
        if not pl:inVehicle() then
            return
        end
        local veh = pl:getVehicle():getParent()
        local min, max = veh:worldSpaceAABB()
        
        if localview then
            origin = eyePos()
        else
            origin = (max + min) / 2 - eyeVector() * dist + Vector(0,0,25)
        end

        return {
            origin = origin, 
            angles = angles, 
            fov = fov/1.2 + (localview and 15 or 0 ), 
            znear = znear, 
            zfar = zfar, 
            drawviewer = not localview, 
            ortho = ortho
        }
    end)
    hook.add("mouseWheeled","normalize",function( delta )
        dist = dist - delta * 8
    end)
    hook.add("inputPressed","normalize",function( key )
        if key == KEY.LCONTROL then
            localview = not localview
        end
    end)
    
end

















































































