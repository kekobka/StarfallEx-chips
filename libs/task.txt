---@name libs/task
if setAuthor then
    setAuthor((chip():getChipAuthor() or "") .. "\n[ Task lib by Kekobka ]")
end
if not Task then
    Task = class("Task")
end
local function canProcess()
    return math.max(cpuTotalAverage(), cpuTotalUsed() / 4) < cpuMax() * 0.7
end
local tasks = {}
Task.static.pool = tasks
local While = false
local function WORK()
    for Key, work in ipairs(tasks) do
        if work.thread(Key) then
            table.remove(tasks, Key)
        end
    end
end
local function RUNTASK(hookname)
    if While then
        local curtime = timer.systime()
        while timer.systime() - curtime < 1 / 60 and canProcess() do
            WORK()
        end
    else
        WORK()
    end

    if #tasks < 1 then
        hook.remove(hookname, table.address(Task))
    end
end

function Task:initialize(func, hk)
    self.func = func
    self.hook = hk
    self.ret = {}
    self.solved = false
    self.thread = coroutine.wrap(function(Key)
        self.ret = {self.func(self)}
        self.solved = true
        if self.thenfn then
            self.thenfn(unpack(self.ret))
        end
        return true
    end)
end

function Task:start()
    table.insert(tasks, self)
    hook.add(self.hook, table.address(Task), function()
        RUNTASK(self.hook)
    end)
    return self
end

function Task.run(func, hk)
    return Task(func, hk or "think"):start()
end
function Task.renderoffscreen(func)
    return Task(func, "renderoffscreen"):start()
end
function Task.renderscene(func)
    return Task(func, "renderscene"):start()
end

local dummyfunc = function()
    return true
end
function Task:cancel()
    self.thread = dummyfunc
end

function Task.all(tasks)
    for _, task in pairs(tasks) do
        while not task.solved do
            Task.yield()
        end
    end
    local ret = {}
    for _, task in pairs(tasks) do
        table.insert(ret, task.ret)
    end
    return unpack(ret)
end
TaskAll = Task.all
local coroutine_wait, coroutine_yield = coroutine.wait, coroutine.yield
function Task.sleep(ms)
    coroutine_wait(ms / 1000)
end

sleep = Task.sleep

function Task.yield()
    coroutine_yield()
end

function Task:th(fn)
    self.thenfn = fn
end

function Task.While(bool)
    local temp = While
    While = bool
    return temp
end

function Task:await()
    while not self.solved do
        coroutine_yield()
    end
    return unpack(self.ret)
end
function Task:kill()
    table.removeByValue(tasks, self)
    table.empty(self)
    self = nil
end

Task.wait = Task.await

await = setmetatable({}, {
    __mul = function(_, task)
        -- assert(istable(task) and task:isInstanceOf(Task), "await for Task only")
        return task:await()
    end,
    __tostring = function()
        return "await function"
    end
})

async = setmetatable({}, {
    __mul = function(_, fn)
        assert(isfunction(fn), "is not function")

        return function(...)
            local args = {...}

            return Task.run(function()
                return fn(unpack(args))
            end)
        end
    end,
    __tostring = function()
        return "async function"
    end
})
if not TASKINITIALIZED then

    local http_ = table.copy(http)

    fetch = async * function(url, options)
        options = options or {}
        local ret
        local cc = function(...)
            local args = {...}
            ret = {
                body = args[1],
                length = args[2],
                headers = args[3],
                code = args[4]
            }
        end
        if options.payload then

            http_.post(url, options.payload, cc, cc, options.headers)
        else
            http_.get(url, cc, cc, options.headers)
        end
        while not ret do
            Task.yield()
        end
        return ret
    end
    http.isAsync = true
    if CLIENT then

        bass.isAsync = true
        local bass_ = table.copy(bass)

        bassURL = async * function(path, flags)

            local ret

            bass_.loadURL(path, flags or "", function(...)
                ret = {...}
            end)

            while not ret do
                Task.yield()
            end
            return unpack(ret)
        end
        soundLoad = async * function(url, flags)
            local ret
            local cc = function(...)
                local args = {...}
                ret = {
                    Bass = args[1],
                    error = args[2],
                    name = args[3]
                }
            end

            bass_.loadURL(url, flags or "", cc)

            while not ret do
                Task.yield()
            end
            return ret
        end
    else
        local prop_ = table.copy(prop)

        prop.createAsync = async * function(...)

            while not prop_.canSpawn() do
                Task.sleep(200)
            end

            return prop_.create(...)

        end
        prop.createSeatAsync = async * function(...)

            while not prop_.canSpawn() do
                Task.sleep(200)
            end

            return prop_.createSeat(...)

        end
        prop.createCustomAsync = async * function(...)

            while not prop_.canSpawn() do
                Task.sleep(200)
            end
            return prop_.createCustom(...)

        end
    end
    hologram.createAsync = async * function(...)

        while not hologram.canSpawn() do
            Task.sleep(200)
        end
        return hologram.create(...)

    end
end
_G.TASKINITIALIZED = true

return Task

